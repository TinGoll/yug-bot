import { Composer } from "telegraf";
import fs from 'fs';
import request from 'request';
import path from 'path';
import { Document, MyContext } from "../../../../@types";
import i18n from "../../../../localization";
import { token } from "../../../../token";
import { document_final_keyboard, test_inline } from "../../../../keyboards/other.keyboards";


const proofsPoint = new Composer<MyContext>(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä

// –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ start –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
proofsPoint.command("start", async (ctx) => {
    ctx.scene.session.currentDocument = null;
    await ctx.reply(i18n.t("ru", "document_canceled_txt"))
    return ctx.scene.enter("main-menu");
});


// –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É next, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â—É—é —Å—Ü–µ–Ω—É.
proofsPoint.command("next", async (ctx) => {
    const document = <Document>ctx.scene.session.currentDocument;
    if (document.photos.length > 3) {
        return ctx.replyWithHTML(`<u>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - 3.</u>\n–£–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ ${document.photos.length  - 3}`)
    }
    
    const caption = i18n.t("ru", "scene_add_document_final", {
        date: `${document.date_violation}, ${document.time_violation}`,
        worker: document.worker,
        reson: document.reson,
        amount: Number(document.amount).toLocaleString('ru-RU', { style: 'currency', currency: 'RUB' }),
        files: document.photos.map( p => `üìé <code>${p.fileName}</code>`).join("\n")
    })
    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø.
    const photos = document.photos.map((photo, index, arr) => {
        const media: { type: "photo", media: string, caption?: string } = {
            type: photo.type,
            media: photo.media,
        }
        if (index === 0) media.caption = `–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${arr.length} —à—Ç.`;
        return media
    });
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–∫
    await ctx.replyWithMediaGroup(photos);
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    const msg = await ctx.replyWithHTML(caption, document_final_keyboard);
    
    (<Document>ctx.scene.session.currentDocument).lastMsg = msg;
    return ctx.wizard.next();
});
//********************************************************************* */

proofsPoint.hears(/\/del/, (ctx) => {
    const id = Number(ctx.message.text.slice(4));
    (<Document>ctx.scene.session.currentDocument).photos = (<Document>ctx.scene.session.currentDocument).photos.filter(p => p.photoId !== id);
    const photos = (<Document>ctx.scene.session.currentDocument).photos;
    const files = photos.length
        ? `–§–∞–π–ª—ã:\n\n${photos.map((p, index) => `üìé <code>${p.fileName}</code> [/del${p.photoId}]`).join(`\n`)}`
        : '–§–∞–π–ª–æ–≤ –Ω–µ—Ç.';

    ctx.replyWithHTML(i18n.t("ru", "scene_add_document_proofs_delete_txt", {
        files
    }));
});

// –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã - –æ—Ç—Å–µ–∫–∞–µ–º.
proofsPoint.hears(/\/\w+/, (ctx) => ctx.reply(i18n.t("ru", "value_must_not_be_a_command")));

// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ.
proofsPoint.on("photo", async (ctx) => {

    const file_id = ctx.message.photo[ctx.message.photo.length - 1].file_id
    const immage = await ctx.telegram.getFile(file_id);
    const filePath = immage.file_path;
    const fileName = `photo_${Date.now().toString(16)}.jpg`
    const downloadURL = `https://api.telegram.org/file/bot${token}/${filePath}`;

    const repositoryPath = path.resolve(__dirname, "..", "..", "..", "..", "files", "photo", fileName);

    const photoId = (<Document>ctx.scene.session.currentDocument).photoId;
    (<Document>ctx.scene.session.currentDocument).photoId++;
    (<Document>ctx.scene.session.currentDocument).photos.push({
        type: "photo",
        downloadURL,
        fileName,
        media: file_id,
        path: repositoryPath,
        photoId
    })

    let notify: string = '';
    if ((<Document>ctx.scene.session.currentDocument).photos.length > 3) {
        notify = i18n.t("ru", "maximum_number_of_files_exceeded");
    }
    const files = `${(<Document>ctx.scene.session.currentDocument).photos.map((p, index) => `üìé <code>${p.fileName}</code> [/del${p.photoId}]`).join(`\n`)}`

    ctx.replyWithHTML(i18n.t("ru", "scene_add_document_proofs_add_txt", { notify, files }));
})

proofsPoint.use((ctx) =>
    ctx.reply(i18n.t("ru", "scene_add_document_proofs_txt"))
)

export default proofsPoint;
